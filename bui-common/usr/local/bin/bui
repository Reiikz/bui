#!/bin/bash
VERSION=0.0.1
CONFIG_FOLDER=/etc/bui
ZONES=$CONFIG_FOLDER/zones.sh

function printInfo {
    echo "bui command, version $VERSION"
    echo "Copyright (c) 2020"
    echo "License GNU/LGPLv3.0"
    echo "source on: https://github.com/Reiikz/bui"
}

function printHelp {
    echo "RTFM..."
    echo "For help use man bui"
}

function verifyExistance {
    source $ZONES
    for i in $(seq 0 $((${#zl[@]}-1)) ); do
        [ "$1" == "${zl[$i]}" ] && exists=1 && break
    done
}

function breakDownDomain {
    d=$1
    declare -A FIELDS
    source bui-common break-domain $d
    az="${FIELDS[$LAST_FIELD]}"
    for i in $(seq 0 $(($LAST_FIELD-1)) ); do [ ! -z $dwaz ] && dwaz="$dwaz.${FIELDS[$i]}" || dwaz="${FIELDS[$i]}"; done
}

function verifyDomain {
    d=$1
    breakDownDomain $d
    unset exists
    verifyExistance $az
    [ -z "$exists" ] && echo "Authority zone $az does not exist, use bui -az -d <zone name> -IP <server ip> to create it" && exit 1
}

function auto {
    if [ "$FIRST" == "ADDRESS" ] && [ ! -z "${DOMAINS[@]}" ]; then
        #[ ${#DOMAINS[@]} -gt 1 ] && echo "Error: specified more than 1 domain on reverse dns addition" && exit 1
        #[ ${#ADDRESSES[@]} -gt 1 ] && echo "Error: specified more than 1 address on reverse dns addition" && exit 1
        addr="${ADDRESSES[0]}"
        d="${DOMAINS[0]}"
        unset ERR
        declare -A IPV4
        source bui-common verifyIPV4 $addr
        [ ! -z "$ERR" ] && echo "$ERR" && exit 1
        verifyDomain $d
        export QUIET=1
        bui-cfgh addr-record $az "$(bui-common format $addr $d)"
        unset QUIET
        exit 0
    fi
    if [ "$FIRST" == "DOMAIN" ] && [ ! -z "${ADDRESSES[@]}" ] && [ ${#DOMAINS[@]} -eq 1 ]; then
        d="${DOMAINS[0]}"
        addr="${ADDRESSES[0]}"
        unset ERR
        declare -A IPV4
        source bui-common verifyIPV4 $addr
        [ ! -z "$ERR" ] && echo "$ERR" && exit 1
        unset FIELDS
        verifyDomain $d
        
        
        export QUIET=1
        bui-cfgh addrecord $az "$(bui-common format $dwaz $addr)"
        unset QUIET
        exit 0
    fi
    if [ ${#DOMAINS[@]} -eq 2 ]; then
        d="${DOMAINS[0]}"
        unset FIELDS
        breakDownDomain $d
        export QUIET=1
        bui-cfgh addrecord $az "$(bui-common format $dwaz ${DOMAINS[1]})"
        unset QUIET
        exit 0
    fi
    echo "Wrong usage of bui auto, use man bui" 
    exit 1
}

function reset {
    [ -z ${DOMAINS[@]} ] && echo "specify at least 1 domain to clear (-d example.com)" && exit 1
    source $ZONES
    for i in $(seq 0 $((${#DOMAINS[@]}-1)) ); do
        d="${DOMAINS[$i]}"
        verifyDomain $d
        [ -z "$exists" ] && echo "Authority zone $az does not exist, use bui -az -d <zone name> -IP <server ip> to create it" && exit 1
        for i in $(seq 0 $((${zones[$az[records]]}-1)) ); do
            r="${zones[;$i-$az]}"
            if [ "$az" == "$d" ]; then
                bui-cfgh rrecord $az "$r"
            else
                regex=$(sed -E "s/\./\\\./g" <<< $dwaz)
                [ ! -z "$ALL" ] && [ "$(grep -oE "^.*\.{1}$regex\s+IN.*$" <<< $r )" != "" ] && bui-cfgh rrecord $az "$r"
                [ "$(grep -oE "^$regex\s+IN.*$" <<< $r )" != "" ] && bui-cfgh rrecord $az "$r"
            fi
        done
    done
    [ "$az" == "$d" ] && bui-cfgh addrecord $az "${zones[$az[ns1]]}"
    [ ! -z $ALL ] && resetReverse
    exit 0
}

function isThereDomains {
    [ -z ${DOMAINS[@]} ] && echo "specify at least 1 domain to clear (-d example.com)" && exit 1
}

function resetReverse {
    [ -z ${DOMAINS[@]} ] && echo "specify at least 1 domain to clear (-d example.com)" && exit 1
    source $ZONES
    for i in $(seq 0 $((${#DOMAINS[@]}-1)) ); do
        d="${DOMAINS[$i]}"
        source bui-common break-domain $d
        az="${FIELDS[$LAST_FIELD]}"
        for i in $(seq 0 $(($LAST_FIELD-1)) ); do [ ! -z $dwaz ] && dwaz="$dwaz.${FIELDS[$i]}" || dwaz="${FIELDS[$i]}"; done
        unset exists
        verifyExistance $az
        [ -z "$exists" ] && echo "Authority zone $az does not exist, use bui -az -d <zone name> -IP <server ip> to create it" && exit 1
        for i in $(seq 0 $((${zones[$az[r-records]]}-1)) ); do
            r="${zones[;r-$i-$az]}"
            if [ "$az" == "$d" ]; then
                bui-cfgh rr-record $az "$r"
            else
                regex=$(sed -E "s/\./\\\./g" <<< $dwaz)
                [ "$(grep -oE "^.*\.{1}$regex\s+IN.*$" <<< $r )" != "" ] && bui-cfgh rr-record $az "$r"
                [ "$(grep -oE "^$regex\s+IN.*$" <<< $r )" != "" ] && bui-cfgh rr-record $az "$r"
            fi
        done
    done
    exit 0
}

function autoreverse {
    isThereDomains
    for d in ${DOMAINS[@]}; do
        bui-cfgh autoreverse $d
    done
}

function de-autoreverse {
    isThereDomains
    for d in ${DOMAINS[@]}; do
        bui-cfgh de-autoreverse $d
    done
}

function isNaturalNumber {
    [ -z "$(grep -oE "^[0-9]+$" <<< "$1")" ] && echo "WRONG $2 $1 is not a number or it is negative, aborted" && exit 1
}

function addzone {
    isThereDomains

    [ -z $TTL ] &&                  TTL=$(bui-default ttl)
    [ -z $REFRESH ] &&              REFRESH=$(bui-default refresh)
    [ -z $RETRY ] &&                RETRY=$(bui-default retry)
    [ -z $EXPIRE ] &&               EXPIRE=$(bui-default expire)
    [ -z $RESPONSABLE ] &&          RESPONSABLE=$(bui-default responsable)
    [ -z $NEGATIVE_CACHE_TTL ] &&   NEGATIVE_CACHE_TTL=$(bui-default ncttl)
    [ -z $R_RESPONSABLE ] &&        R_RESPONSABLE=$(bui-default responsable)

    if [ ! -z "${ADDRESSES[@]}" ]; then
        unset IPV4
        declare -A IPV4
        source bui-common verifyIPV4 ${ADDRESSES[0]}
        [ -z "${IPV4[mask]}" ] && echo "you need to specify the netmask too: ${IPV4[ip]}/<0|8|16|24|32>" && exit 1
        DEFAULT_NETWORK="${IPV4[netid]}"
        NETMASK=${IPV4[mask]}
        for d in ${DOMAINS[@]}; do
            bui-cfgh addzone $d ${IPV4[ip]} $TTL $REFRESH $RETRY $EXPIRE $DEFAULT_NETWORK $NETMASK $RESPONSABLE $NEGATIVE_CACHE_TTL $R_RESPONSABLE
        done
        exit 0
    fi

    declare -A IPS
    source bui-common get-ip

    if [ ${IPS[last]} -eq 0 ]; then
        IP="${IPS[${IPS[last]}]}"
        d=${DOMAINS[0]}
        unset IPV4
        declare -A IPV4
        source bui-common verifyIPV4 $IP
        DEFAULT_NETWORK="${IPV4[netid]}"
        NETMASK=${IPV4[mask]}
        for d in ${DOMAINS[@]}; do
            bui-cfgh addzone $d ${IPV4[ip]} $TTL $REFRESH $RETRY $EXPIRE $DEFAULT_NETWORK $NETMASK $RESPONSABLE $NEGATIVE_CACHE_TTL $R_RESPONSABLE
        done
        exit 0
    fi

    echo "Could not solve the Authority's network, beacause you have multiple IP addresses"
    echo "This will be used for the record ns1 type A containing this servers ip"
    echo "Also it is needed to calculate the reverse dns configuration, find out more on man bui"
    echo "The DNS server should have it's own static IP and is that one which you need to select"
    echo ""
    for i in $(seq 0 ${IPS[last]}); do
        echo "$i - IP: ${IPS[$i]} IFACE: ${IPS[$i;iface]}"
    done
    echo -n "your answer [ENTER]: "
    read a
    [ -z "$(grep -oE "^[0-9]+$" <<< "$a")" ] && echo "you provided a non numeric or negative answer, aborted" && exit 1
    [ $a -gt ${IPS[last]} ] && echo "Your answer is not in range, aborted" && exit 1
    unset IPV4
    declare -A IPV4
    source bui-common verifyIPV4 ${IPS[$a]}
    
    DEFAULT_NETWORK="${IPV4[netid]}"
    NETMASK=${IPV4[mask]}
    for d in ${DOMAINS[@]}; do
        bui-cfgh addzone $d ${IPV4[ip]} $TTL $REFRESH $RETRY $EXPIRE $DEFAULT_NETWORK $NETMASK $RESPONSABLE $NEGATIVE_CACHE_TTL $R_RESPONSABLE
    done
    exit 0
}

function remove {
    if [ ${#DOMAINS[@]} -gt 0 ]; then
        for d in ${DOMAINS[@]}; do
            echo "removing: $d"
            bui-cfgh rzone $d
        done
    else
        echo "No Authority zones specified, use -d <Authority zone>"
        exit 1
    fi
}

[ $# -eq 0 ] && op="printHelp"
opts=""
while [ $# -gt 0 ]; do
    case $1 in

        autoreverse|--autoreverse)
            [ ! -z "$op" ] && echo "Can not specify two operations at once" && exit 1
            [ -z "$op" ] && op=autoreverse
        ;;

        de-autoreverse|--de-autoreverse)
            [ ! -z "$op" ] && echo "Can not specify two operations at once" && exit 1   
            [ -z "$op" ] && op=de-autoreverse
        ;;
        
        --all)
            ALL=1
        ;;

        --reset|reset)
            op=reset
        ;;

        --reset-reverse|reset-reverse)
            op=resetReverse
        ;;

        --address|-IP)
            shift
            ADDRESSES[${#ADDRESSES[@]}]="$1"
            [ -z "$FIRST" ] && FIRST="ADDRESS"
        ;;

        --domain|-d)
            shift
            DOMAINS[${#DOMAINS[@]}]="$1"
            [ -z "$FIRST" ] && FIRST="DOMAIN"
        ;;

        auto|--auto|-a)
            [ ! -z "$op" ] && echo "Can not specify two operations at once" && exit 1   
            [ -z "$op" ] && op="auto"
        ;;

        h|-h|--help|-help|help)
            printHelp
            exit 0
        ;;

        --version|-v|-version)
            printInfo
            exit 0
        ;;

        addzone|--addzone)
            [ ! -z "$op" ] && echo "Can not specify two operations at once" && exit 1
            [ -z "$op" ] && op=addzone
        ;;

        remove|--remove|-r)
            [ ! -z "$op" ] && echo "Can not specify more than one operations" && exit
            [ -z "$op" ] && op=remove
        ;;

        --ttl)
            [ -z "$2" ] && echo "Expected number after $1" && exit 1
            shift
            TTL="$1"
            isNaturalNumber $TTL TTL
        ;;

        --refresh)
            [ -z "$2" ] && echo "Expected number after $1" && exit 1
            shift
            REFRESH="$1"
            isNaturalNumber $REFRESH REFRESH
        ;;

        --retry)
            [ -z "$2" ] && echo "Expected number after $1" && exit 1
            shift
            RETRY="$1"
            isNaturalNumber $RETRY RETRY
        ;;

        --expire)
            [ -z "$2" ] && echo "Expected number after $1" && exit 1
            shift
            EXPIRE="$1"
            isNaturalNumber $EXPIRE EXPIRE
        ;;

        --responsable)
            [ -z "$2" ] && echo "Expected word after $1" && exit 1
            shift
            RESPONSABLE="$1"
        ;;

        --r-responsable)
            [ -z "$2" ] && echo "Expected word after $1" && exit 1
            shift
            R_RESPONSABLE="$1"
        ;;

        --negative-cache-ttl)
            [ -z "$2" ] && echo "Expected number after $1" && exit 1
            shift
            NEGATIVE_CACHE_TTL="$1"
            isNaturalNumber $NEGATIVE_CACHE_TTL "NEGATIVE CACHE TTL"
        ;;

        *)
            opts="$opts "
        ;;
    esac
    shift
done
[ -z "$op" ] && echo "No option selected" && exit 1
$op $opts
exit 0